<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no">
  <title>myfirstmap</title>
  <link rel="stylesheet" href="/stylesheets/style.css">
  <script type="text/javascript" src="https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=vf2sd1hd65"></script>
  <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
  <script src="https://dapi.kakao.com/v2/maps/sdk.js?appkey=8514c408bbfe1a0e1952c548ca003181&libraries=services"></script>
</head>
<body>
<div id="navbar">myfirstmap</div>
<div id="infoBox">
  <div id="infoTitle">현재날짜</div>
  <div id="infoContent">2020.11.08</div>
</div>
<div id="search">
  <input type="text" placeholder="목적지를 입력해주세요." id="search_input">
  <button id="search_button" type="button">검색</button>
</div>
<div id="current">현재 위치</div>
<div id="map" style="width:100%;height:100vh;padding-top:50px"></div>

<script src="/data/data.js"></script>
<script>
  var mapOptions = {
    center: new naver.maps.LatLng(37.401092, 127.106288), // 위도 경도
    zoom: 15
  };

  var map = new naver.maps.Map('map', mapOptions);

  var markerList = [];
  var infoWindowList = [];

  for (var i in data) {
    var target = data[i];
    var latlng = new naver.maps.LatLng(target.lat, target.lng);
    var marker = new naver.maps.Marker({
      map: map,
      position: latlng,
      icon: {
        content: "<div class='marker'></div>",
        anchor: new naver.maps.Point(12, 12)
      }
    })

    var content = `<div class="infowindow_wrap">
        <div class="infowindow_title">${target.title}</div>
        <div class="infowindow_content">${target.content}</div>
        <div class="infowindow_date">${target.date}</div>
    </div>`;

    var infowindow = new naver.maps.InfoWindow({
      content: content,
      backgroundColor: "#00ff0000", // 투명색 - 이렇게 하는 이유는 해당 info window 의 스타일은 css 파일에서 커스텀할 것이기 때문에 초기화해주는 의미이다.
      borderColor: "#00ff0000",
      anchorSize: new naver.maps.Size(0, 0), // 앵커사이즈는 info window가 뜰 경우 말풍선 꼬리를 뜻하는 것인데 그걸 이번 예제에선 설정하지 않을 것이기 때문에 0,0으로.
    })

    markerList.push(marker);
    infoWindowList.push(infowindow);
  }

  for (var j = 0; j < markerList.length; j++) {
    // 네이버 지도에 이벤트를 설정해주는 방법이다.
    // markerList를 클릭했을 때 getClickHandler 라는 콜백 함수를 실행시키겠다 라는 의미이다.
    naver.maps.Event.addListener(markerList[j], "click", getClickHandler(j));
    // 아래 click 이벤트등록은 수정할 필요가 있어 보이긴 한데.. 음 생각해보자. 일단 공부 ㄱㄱ
    naver.maps.Event.addListener(map, "click", clickMap(j));
  }

  function clickMap (index) {
    return function () {
      var infowindow = infoWindowList[index];
      infowindow.close();
    }
  }

  function getClickHandler (index) {
    return function () {
      var marker = markerList[index];
      var infowindow = infoWindowList[index];
      if (infowindow.getMap()) { // infowindow가 현재 지도의 띄워져있는지 아닌지를 true / false로 반환
        infowindow.close();
      } else {
        infowindow.open(map, marker); // map의 marker 위에다가 infowindow를 열리게해라.
      }
    }
  }

  let currentUse = true;

  $("#current").on("click", () => {
    if ('geolocation' in navigator) {
      navigator.geolocation.getCurrentPosition(function (position) {
        const lat = position.coords.latitude;
        const lng = position.coords.longitude;
        const latlng = new naver.maps.LatLng(lat, lng);

        if (currentUse) {
          const marker = new naver.maps.Marker({
            map: map,
            position: latlng,
            icon: {
              content: '<img class="pulse" draggable="false" unselectable="on" src="https://myfirstmap.s3.ap-northeast-2.amazonaws.com/circle.png">', // drag 불가능, 선택도 불가능
              anchor: new naver.maps.Point(11, 11),
            }
          })
          currentUse = false;
        }

        map.setZoom(15, false); // zoom은 15정도로 하고 이동하는 애니메이션은 주지 않겠다.(false)
        map.panTo(latlng); // 현재위치로 이동
      })
    } else {
      alert("위치정보 사용 불가능");
    }
  })

  let ps = new kakao.maps.services.Places(); // 앞으로 목적지 검색을 하는데 있어서 중요한 역할을 하게되는 함수 중에 하나다.
  let search_arr = [];

  $("#search_input").on("keydown", function (e) {
    if (e.keyCode === 13) { // enter key 눌렀을 때,
      let content = $(this).val();
      ps.keywordSearch(content, placeSearchCB); // content 를 통해서 api를 요청하게 되고 그거에 대한 결과값이 placeSearchCB 라는 함수를 통해서 처리된다.
    }
  })

  $("#search_button").on("click", function () {
    let content = $("#search_input").val();
    ps.keywordSearch(content, placeSearchCB); // content 를 통해서 api를 요청하게 되고 그거에 대한 결과값이 placeSearchCB 라는 함수를 통해서 처리된다.
  })

  function placeSearchCB (data, status, pagination) {
    // data - 검색결과
    // status - api를 카카오 서버를 활용할 것이기 때문에 그 서버에 대한 상태를 status를 통해 받을 수 있다.
    // pagination - 검색 결과가 얼만큼 있는지 번호를 통해 알 수 있게 해준다.
    if (status === kakao.maps.services.Status.OK) {
      let target = data[0];
      const lat = target.y;
      const lng = target.x;
      const latlng = new naver.maps.LatLng(lat, lng);
      const marker = new naver.maps.Marker({
        map: map,
        position: latlng,
      })

      if (search_arr.length === 0) {
        search_arr.push(marker);
      } else {
        search_arr.push(marker);
        let pre_marker = search_arr.splice(0, 1); // splice 메서드는 search_arr 배열 자체에 영향을 끼치는 메서드이다. 맨 앞에값 한개 지운다는 뜻이다.
        pre_marker[0].setMap(null); // 아, setMap 메서드는 naver maps 메서드인가보다. 이전 마커 지우는 역할이다.
      }

      map.setZoom(15, false); // zoom은 15정도로 하고 이동하는 애니메이션은 주지 않겠다.(false)
      map.panTo(latlng); // 현재위치로 이동
    } else {
      alert("검색 결과가 없습니다.");
    }
  }
</script>
</body>
</html>